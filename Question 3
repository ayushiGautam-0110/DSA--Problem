#include <iostream>
#include <vector>

using namespace std;

vector<int> boundaryTraversal(vector<vector<int>>& matrix, int n, int m) {
    vector<int> result;

    // Traverse the top row
    for (int i = 0; i < m; i++) {
        result.push_back(matrix[0][i]);
    }

    // Traverse the rightmost column
    for (int i = 1; i < n; i++) {
        result.push_back(matrix[i][m - 1]);
    }

    // Traverse the bottom row if there is more than one row
    if (n > 1) {
        for (int i = m - 2; i >= 0; i--) {
            result.push_back(matrix[n - 1][i]);
        }
    }

    // Traverse the leftmost column if there is more than one column
    if (m > 1) {
        for (int i = n - 2; i >= 1; i--) {
            result.push_back(matrix[i][0]);
        }
    }

    return result;
}

int main() {
    int n1 = 4, m1 = 4;
    vector<vector<int>> matrix1 = {{1, 2, 3, 4},
                                   {5, 6, 7, 8},
                                   {9, 10, 11, 12},
                                   {13, 14, 15, 16}};

    vector<int> result1 = boundaryTraversal(matrix1, n1, m1);
    for (int num : result1) {
        cout << num << " ";
    }
    cout << endl;

    int n2 = 3, m2 = 4;
    vector<vector<int>> matrix2 = {{12, 11, 10, 9},
                                   {8, 7, 6, 5},
                                   {4, 3, 2, 1}};

    vector<int> result2 = boundaryTraversal(matrix2, n2, m2);
    for (int num : result2) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
